using System.Diagnostics;
using System.Reflection;
using System.Text;
using Microsoft.Extensions.DependencyInjection;
using Spectre.Console;
using Spectre.Console.Cli;
using Spectre.Console.Cli.Extensions.DependencyInjection;
using TinyCity.BookmarkEngines;
using TinyCity.Commands;

namespace TinyCity
{
    public class Program
    {
        async static Task<int> Main(string[] args)
        {
            EnsureDownloadedBackupIsRemoved();
            Console.OutputEncoding = Encoding.UTF8; // emoji support

            var stopWatch = Stopwatch.StartNew();
            var interceptor = new ExtraInfoInterceptor();
            Exception capturedException = null;

            var services = SetupIoC();
            using var registrar = new DependencyInjectionRegistrar(services);
            var app = new CommandApp(registrar);
            app.Configure(config =>
            {
                config.SetApplicationVersion(GetVersion());
                config.SetInterceptor(interceptor);
                config.SetApplicationName("tinycity");

                config.AddCommand<SearchCommand>("search")
                      .WithDescription("Search the bookmarks.");

                config.AddCommand<ListCommand>("list")
                      .WithAlias("ls")
                      .WithDescription("List all bookmarks.");

                config.AddCommand<UpdateCommand>("update")
                      .WithDescription("Updates Tinycity, downloading the latest release from Github.");

                config.AddCommand<ConfigCommand>("config")
                      .WithDescription("Configure bookmark sources.");

                config.SetExceptionHandler((ex, resolver) =>
                {
                    capturedException = ex;
                });
            });

            int result = await app.RunAsync(args);
            
            stopWatch.Stop();
            interceptor.ShowOutput(stopWatch, capturedException);
            
            return result;
        }

        static string GetVersion()
        {
            // Generated by GitVersion in its msbuild task, from the Git tag.
            return Assembly.GetExecutingAssembly().GetName().Version?.ToString() ?? "0.0.1";
        }

        static ServiceCollection SetupIoC()
        {
            var settings = TinyCitySettings.Load();

            var services = new ServiceCollection();
            services.AddSingleton<ChromeBookmarks>();
            services.AddSingleton<MarkdownBookmarks>();
            services.AddSingleton<HtmlBookmarks>();
            services.AddSingleton<BookmarkAggregator>();
            services.AddSingleton<TinyCitySettings>(settings);

            return services;
        }

        static void EnsureDownloadedBackupIsRemoved()
        {
            string backupFilename = $"{Environment.ProcessPath}.bak";
            if (Path.Exists(backupFilename))
            {
                File.Delete(backupFilename);
            }
        }
    }
}